41 2 0
38 1
8 252 396 301 347 1 0
8 318 396 367 347 1 0
22 258 348 424 328 0 \NUL
Read Register 1 Address
8 432 396 481 347 1 0
8 498 396 547 347 1 0
22 438 348 604 328 0 \NUL
Read Register 2 Address
20 720 414 779 395 0
wadr_0
20 654 414 713 395 0
wadr_1
8 606 396 655 347 1 0
8 672 396 721 347 1 0
22 612 348 767 328 0 \NUL
Write Register Address
20 480 414 539 395 0
adr2_1
20 546 414 605 395 0
adr2_0
20 366 414 425 395 0
adr1_0
20 300 414 359 395 0
adr1_1
19 174 108 233 89 0
reg0_2
19 162 84 221 65 0
reg0_3
19 198 156 257 137 0
reg0_0
19 186 132 245 113 0
reg0_1
11 258 108 285 10 0 1
22 144 36 255 16 0 \NUL
Register 0 Value
19 330 108 389 89 0
reg1_2
19 318 84 377 65 0
reg1_3
19 354 156 413 137 0
reg1_0
19 342 132 401 113 0
reg1_1
11 414 108 441 10 0 1
22 300 36 411 16 0 \NUL
Register 1 Value
19 486 108 545 89 0
reg2_2
19 474 84 533 65 0
reg2_3
19 510 156 569 137 0
reg2_0
19 498 132 557 113 0
reg2_1
11 570 108 597 10 0 1
22 456 36 567 16 0 \NUL
Register 2 Value
19 642 108 701 89 0
reg3_2
19 630 84 689 65 0
reg3_3
19 666 156 725 137 0
reg3_0
19 654 132 713 113 0
reg3_1
11 726 108 753 10 0 1
22 612 36 723 16 0 \NUL
Register 3 Value
19 648 264 707 245 0
alu_2
19 636 240 695 221 0
alu_3
19 672 312 731 293 0
alu_0
19 660 288 719 269 0
alu_1
11 732 264 759 166 0 1
22 648 192 724 172 0 \NUL
ALU Output
25 12 528 119 432
8 12 396 61 347 1 0
8 6 288 55 239 1 1
8 6 192 55 143 1 1
20 66 414 125 395 0
sel
20 60 210 119 191 0
clear
20 150 510 209 491 0
kpad_3
20 138 534 197 515 0
kpad_2
20 132 558 191 539 0
kpad_1
20 120 582 179 563 0
kpad_0
19 336 264 395 245 0
in1_2
19 324 240 383 221 0
in1_3
19 360 312 419 293 0
in1_0
19 348 288 407 269 0
in1_1
11 420 264 447 166 0 1
22 336 192 414 172 0 \NUL
ALU Input 1
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
19 174 264 233 245 0
kpad_2
19 162 240 221 221 0
kpad_3
19 198 312 257 293 0
kpad_0
19 186 288 245 269 0
kpad_1
11 258 264 285 166 0 1
22 150 192 249 172 0 \NUL
Keypad Output
22 12 144 117 124 0 \NUL
Clear Registers
22 18 324 100 304 0 \NUL
Store Select
20 60 294 119 275 0
update
22 12 240 121 220 0 \NUL
Update Register
19 492 264 551 245 0
in2_2
19 480 240 539 221 0
in2_3
19 516 312 575 293 0
in2_0
19 504 288 563 269 0
in2_1
11 576 264 603 166 0 1
22 492 192 570 172 0 \NUL
ALU Input 2
22 18 348 230 328 0 \NUL
0 = Keypad input, 1 = ALU result
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 228 450 478 430 0 \NUL
Select clear to initialize registers to 0.
22 228 474 557 454 0 \NUL
Select store select to choose which value to store.
22 228 498 508 478 0 \NUL
Choose read and write register addresses.
22 228 522 727 502 0 \NUL
Read addresses = reg sources of ALU inputs, Write address = reg to save to
22 228 546 480 526 0 \NUL
Press update to save value to register
22 228 594 668 574 0 \NUL
You are only permitted to modify the header comment on this page.
1 655 404 652 371
1 721 404 718 371
1 481 404 478 371
1 547 404 544 371
1 367 404 364 371
1 301 404 298 371
1 259 74 218 74
1 230 98 259 80
1 242 122 259 86
1 254 146 259 92
1 415 74 374 74
1 386 98 415 80
1 398 122 415 86
1 410 146 415 92
1 571 74 530 74
1 542 98 571 80
1 554 122 571 86
1 566 146 571 92
1 727 74 686 74
1 698 98 727 80
1 710 122 727 86
1 722 146 727 92
1 733 230 692 230
1 704 254 733 236
1 716 278 733 242
1 728 302 733 248
1 52 167 61 200
1 58 371 67 404
1 421 230 380 230
1 392 254 421 236
1 404 278 421 242
1 416 302 421 248
1 116 500 151 500
1 116 506 139 524
1 116 512 133 548
1 116 518 121 572
1 259 230 218 230
1 230 254 259 236
1 242 278 259 242
1 254 302 259 248
1 52 263 61 284
1 577 230 536 230
1 548 254 577 236
1 560 278 577 242
1 572 302 577 248
38 2
22 294 42 484 22 0 \NUL
Placeholder signal/recievers
22 18 480 388 460 0 \NUL
These are only present so circuit simulates without error
22 18 504 290 484 0 \NUL
Remove these once logic is implemented
22 18 528 266 508 0 \NUL
You are permitted to modify this page
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
38 3
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
24 428 226 477 154 1 1 1
24 428 226 477 154 1 1 1
24 427 339 476 267 1 1 1
24 416 444 465 372 1 1 1
24 437 549 486 477 1 1 1
19 288 228 347 209 0
clear
19 284 339 343 320 0
clear
19 284 556 343 537 0
clear
19 281 453 340 434 0
clear
5 406 594 455 545 0
5 372 468 421 419 0
5 383 354 432 305 0
5 388 243 437 194 0
15 354 181 403 132
15 382 285 431 236
15 368 399 417 350
15 390 503 439 454
20 525 202 584 183 0
reg0_3
20 519 281 578 262 0
reg0_2
20 522 377 581 358 0
reg0_1
20 521 486 580 467 0
reg0_0
22 237 55 308 35 0 \NUL
Register 0
19 144 539 203 520 0
update
19 137 434 196 415 0
update
19 144 334 203 315 0
update
19 151 222 210 203 0
update
19 152 184 211 165 0
w_0
19 140 296 199 277 0
w_0
19 135 406 194 387 0
w_0
19 147 511 206 492 0
w_0
3 251 216 300 167 0 0
3 235 330 284 281 0 0
3 225 435 274 386 0 0
3 242 540 291 491 0 0
19 293 184 352 165 0
data_3
19 290 289 349 270 0
data_2
19 269 392 328 373 0
data_1
19 285 499 344 480 0
data_0
22 537 38 767 18 0 \NUL
A 4 bit register using data flip-flops
22 439 63 796 43 0 \NUL
the data is sent from the store select on the next page.
22 390 88 797 68 0 \NUL
the update and w_? is whether this register should be updated
22 465 110 790 90 0 \NUL
clear in inverted as the flip flop only clears on a 0
22 474 136 781 116 0 \NUL
The q field is sent to the corrisponding register
1 340 546 407 569
1 452 569 451 545
1 418 443 430 440
1 373 443 337 443
1 340 329 384 329
1 344 218 389 218
1 434 218 442 222
1 429 329 441 335
1 436 478 451 479
1 414 374 430 374
1 428 260 441 269
1 400 156 442 156
1 483 497 522 476
1 462 392 523 367
1 473 287 520 271
1 474 174 526 192
1 208 174 252 177
1 207 212 252 205
1 196 286 236 291
1 200 324 236 319
1 191 396 226 396
1 193 424 226 424
1 200 529 243 529
1 203 501 243 501
1 297 191 429 192
1 281 305 428 305
1 271 410 417 410
1 288 515 438 515
1 429 174 349 174
1 428 287 346 279
1 417 392 325 382
1 438 497 341 489
38 4
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
24 470 223 519 151 1 1 1
24 470 223 519 151 1 1 1
24 469 336 518 264 1 1 1
24 458 441 507 369 1 1 1
24 479 546 528 474 1 1 1
19 330 225 389 206 0
clear
19 326 336 385 317 0
clear
19 326 553 385 534 0
clear
19 323 450 382 431 0
clear
5 448 591 497 542 0
5 414 465 463 416 0
5 425 351 474 302 0
5 430 240 479 191 0
15 375 178 424 129
15 424 282 473 233
15 410 396 459 347
15 432 500 481 451
20 575 181 634 162 0
reg1_3
20 559 293 618 274 0
reg1_2
20 567 399 626 380 0
reg1_1
20 565 504 624 485 0
reg1_0
22 238 55 309 35 0 \NUL
Register 1
19 148 549 207 530 0
update
19 165 426 224 407 0
update
19 151 324 210 305 0
update
19 147 222 206 203 0
update
19 148 184 207 165 0
w_1
19 147 286 206 267 0
w_1
19 164 397 223 378 0
w_1
19 148 517 207 498 0
w_1
3 247 216 296 167 0 0
3 242 320 291 271 0 0
3 254 435 303 386 0 0
3 241 544 290 495 0 0
19 306 171 365 152 0
data_3
19 331 285 390 266 0
data_2
19 326 393 385 374 0
data_1
19 341 508 400 489 0
data_0
22 537 38 767 18 0 \NUL
A 4 bit register using data flip-flops
22 439 63 796 43 0 \NUL
the data is sent from the store select on the next page.
22 390 88 797 68 0 \NUL
the update and w_? is whether this register should be updated
22 464 110 789 90 0 \NUL
clear in inverted as the flip flop only clears on a 0
22 473 136 780 116 0 \NUL
The q field is sent to the corrisponding register
1 382 543 449 566
1 494 566 493 542
1 460 440 472 437
1 415 440 379 440
1 382 326 426 326
1 386 215 431 215
1 476 215 484 219
1 471 326 483 332
1 478 475 493 476
1 456 371 472 371
1 470 257 483 266
1 421 153 484 153
1 525 494 566 494
1 504 389 568 389
1 515 284 560 283
1 516 171 576 171
1 204 174 248 177
1 203 212 248 205
1 203 276 243 281
1 207 314 243 309
1 220 387 255 396
1 221 416 255 424
1 204 539 242 533
1 204 507 242 505
1 293 191 471 189
1 470 302 288 295
1 300 410 459 407
1 287 519 480 512
1 480 494 397 498
1 459 389 382 383
1 470 284 387 275
1 471 171 362 161
38 5
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
24 466 227 515 155 1 1 1
24 466 227 515 155 1 1 1
24 465 340 514 268 1 1 1
24 454 445 503 373 1 1 1
24 475 550 524 478 1 1 1
19 326 229 385 210 0
clear
19 322 340 381 321 0
clear
19 322 557 381 538 0
clear
19 319 454 378 435 0
clear
5 444 595 493 546 0
5 410 469 459 420 0
5 421 355 470 306 0
5 426 244 475 195 0
15 394 182 443 133
15 420 286 469 237
15 406 400 455 351
15 428 504 477 455
20 571 185 630 166 0
reg2_3
20 555 297 614 278 0
reg2_2
20 563 403 622 384 0
reg2_1
20 561 508 620 489 0
reg2_0
22 237 55 308 35 0 \NUL
Register 2
19 144 553 203 534 0
update
19 161 430 220 411 0
update
19 147 328 206 309 0
update
19 143 226 202 207 0
update
19 144 188 203 169 0
w_2
19 143 290 202 271 0
w_2
19 160 401 219 382 0
w_2
19 144 521 203 502 0
w_2
3 243 220 292 171 0 0
3 238 324 287 275 0 0
3 250 439 299 390 0 0
3 237 548 286 499 0 0
19 355 183 414 164 0
data_3
19 336 286 395 267 0
data_2
19 339 404 398 385 0
data_1
19 346 510 405 491 0
data_0
22 537 38 767 18 0 \NUL
A 4 bit register using data flip-flops
22 439 63 796 43 0 \NUL
the data is sent from the store select on the next page.
22 390 88 797 68 0 \NUL
the update and w_? is whether this register should be updated
22 470 110 795 90 0 \NUL
clear in inverted as the flip flop only clears on a 0
22 479 136 786 116 0 \NUL
The q field is sent to the corrisponding register
1 378 547 445 570
1 490 570 489 546
1 456 444 468 441
1 411 444 375 444
1 378 330 422 330
1 382 219 427 219
1 472 219 480 223
1 467 330 479 336
1 474 479 489 480
1 452 375 468 375
1 466 261 479 270
1 440 157 480 157
1 521 498 562 498
1 500 393 564 393
1 511 288 556 287
1 512 175 572 175
1 200 178 244 181
1 199 216 244 209
1 199 280 239 285
1 203 318 239 313
1 216 391 251 400
1 217 420 251 428
1 200 543 238 537
1 200 511 238 509
1 289 195 467 193
1 284 299 466 306
1 296 414 455 411
1 283 523 476 516
1 476 498 402 500
1 455 393 395 394
1 466 288 392 276
1 467 175 411 173
38 6
24 499 228 548 156 1 1 1
24 496 345 545 273 1 1 1
24 485 450 534 378 1 1 1
24 506 555 555 483 1 1 1
19 357 234 416 215 0
clear
19 353 345 412 326 0
clear
19 362 585 421 566 0
clear
19 350 459 409 440 0
clear
5 475 600 524 551 0
5 441 474 490 425 0
5 452 360 501 311 0
5 457 249 506 200 0
19 175 558 234 539 0
update
19 192 435 251 416 0
update
19 170 332 229 313 0
update
19 174 231 233 212 0
update
15 361 183 410 134
15 451 291 500 242
15 437 405 486 356
15 459 509 508 460
20 605 191 664 172 0
reg3_3
20 586 302 645 283 0
reg3_2
20 594 408 653 389 0
reg3_1
20 595 513 654 494 0
reg3_0
22 237 55 308 35 0 \NUL
Register 3
19 175 193 234 174 0
w_3
19 174 295 233 276 0
w_3
19 191 406 250 387 0
w_3
19 175 526 234 507 0
w_3
3 274 225 323 176 0 0
3 269 329 318 280 0 0
3 281 444 330 395 0 0
3 268 553 317 504 0 0
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
19 378 183 437 164 0
data_3
19 390 293 449 274 0
data_2
19 363 405 422 386 0
data_1
19 360 514 419 495 0
data_0
22 537 38 767 18 0 \NUL
A 4 bit register using data flip-flops
22 439 63 796 43 0 \NUL
the data is sent from the store select on the next page.
22 390 88 797 68 0 \NUL
the update and w_? is whether this register should be updated
22 471 111 796 91 0 \NUL
clear in inverted as the flip flop only clears on a 0
22 480 137 787 117 0 \NUL
The q field is sent to the corrisponding register
1 418 575 476 575
1 521 575 520 551
1 487 449 499 446
1 442 449 406 449
1 409 335 453 335
1 413 224 458 224
1 503 224 513 224
1 498 335 510 341
1 505 484 520 485
1 483 380 499 380
1 497 266 510 275
1 407 158 513 158
1 552 503 596 503
1 531 398 595 398
1 542 293 587 292
1 545 176 606 181
1 231 183 275 186
1 230 221 275 214
1 320 200 500 194
1 230 285 270 290
1 226 322 270 318
1 315 304 497 311
1 247 396 282 405
1 248 425 282 433
1 327 419 486 416
1 231 548 269 542
1 231 516 269 514
1 314 528 507 521
1 500 176 434 173
1 497 293 446 283
1 486 398 419 395
1 507 503 416 504
38 7
22 165 30 343 10 0 \NUL
Write Address/Store Select
19 70 266 129 247 0
wadr_1
19 69 230 128 211 0
wadr_0
19 62 342 121 323 0
wadr_1
19 62 314 121 295 0
wadr_0
3 253 262 302 213 0 0
20 321 247 380 228 0
w_0
19 56 434 115 415 0
wadr_1
19 54 406 113 387 0
wadr_0
19 59 534 118 515 0
wadr_1
19 59 506 118 487 0
wadr_0
3 171 535 220 486 0 0
20 279 520 338 501 0
w_3
5 137 357 186 308 0
3 198 343 247 294 0 0
20 308 328 367 309 0
w_1
5 147 421 196 372 0
3 216 435 265 386 0 0
20 315 421 374 402 0
w_2
5 165 245 214 196 0
5 165 281 214 232 0
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
20 681 199 740 180 0
data_3
20 687 304 746 285 0
data_2
20 680 416 739 397 0
data_1
20 679 519 738 500 0
data_0
31 581 235 630 150 0 2
31 576 340 625 255 0 2
31 578 452 627 367 0 2
31 579 555 628 470 0 2
19 456 428 515 409 0
kpad_1
19 452 318 511 299 0
kpad_2
19 455 216 514 197 0
kpad_3
19 462 537 521 518 0
kpad_0
19 454 290 513 271 0
alu_2
19 454 191 513 172 0
alu_3
19 462 513 521 494 0
alu_0
19 456 404 515 385 0
alu_1
19 455 247 514 228 0
sel
19 454 351 513 332 0
sel
19 457 452 516 433 0
sel
19 462 561 521 542 0
sel
14 518 592 567 543
14 521 485 570 436
14 526 376 575 327
14 520 264 569 215
22 10 124 760 104 0 \NUL
Simple logic on the left to choose which register will be updated depending on the 2 bits provided by the 2 switches
22 10 147 748 127 0 \NUL
On the right I used a 2:1 mux to choose between which input will be saved 0 being keypad and 1 being alu output.
1 299 237 322 237
1 115 496 172 496
1 115 524 172 524
1 217 510 280 510
1 118 332 138 332
1 118 304 199 304
1 183 332 199 332
1 244 318 309 318
1 110 396 148 396
1 193 396 217 396
1 112 424 217 424
1 262 410 316 411
1 126 256 166 256
1 211 256 254 251
1 211 220 254 223
1 125 220 166 220
1 580 515 518 527
1 579 412 512 418
1 577 300 508 308
1 582 195 511 206
1 580 509 518 503
1 579 406 512 394
1 577 294 510 280
1 582 189 510 181
1 682 189 627 189
1 688 294 622 294
1 681 406 624 406
1 580 539 518 551
1 579 436 513 442
1 582 219 511 237
1 577 324 510 341
1 680 509 625 509
1 582 231 566 239
1 577 336 572 351
1 579 448 567 460
1 580 551 564 567
38 8
20 685 264 744 245 0
in1_3
20 662 482 721 463 0
in1_2
20 329 251 388 232 0
in1_1
20 324 475 383 456 0
in1_0
22 144 30 253 10 0 \NUL
Read Register 1
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
19 450 502 509 483 0
reg0_2
19 457 298 516 279 0
reg0_3
19 108 512 167 493 0
reg0_0
19 111 287 170 268 0
reg0_1
19 448 482 507 463 0
reg1_2
19 456 275 515 256 0
reg1_3
19 108 492 167 473 0
reg1_0
19 109 265 168 246 0
reg1_1
19 454 455 513 436 0
reg2_2
19 497 428 556 409 0
reg2_3
19 108 472 167 453 0
reg2_0
19 111 243 170 224 0
reg2_1
19 458 252 517 233 0
reg3_2
19 485 216 544 197 0
reg3_3
19 107 452 166 433 0
reg3_0
19 112 222 171 203 0
reg3_1
31 239 511 288 426 0 1
14 196 581 245 532
19 105 535 164 516 0
adr1_1
19 106 561 165 542 0
adr1_0
31 225 288 274 203 0 1
14 178 363 227 314
19 110 317 169 298 0
adr1_1
19 115 342 174 323 0
adr1_0
31 611 300 660 215 0 1
31 583 518 632 433 0 1
14 559 371 608 322
19 455 325 514 306 0
adr1_1
19 456 351 515 332 0
adr1_0
14 528 593 577 544
19 449 525 508 506 0
adr1_1
19 465 551 524 532 0
adr1_0
22 12 127 757 107 0 \NUL
Used a 4:1 mux to read the bits from each individual register and use the adress bits to select which one was read
22 12 151 618 131 0 \NUL
since 0 0 signified register 0 the mux would send the the bit from reg0, 01 then from reg1 etc.
1 240 453 163 442
1 240 459 164 462
1 240 465 164 482
1 240 471 164 502
1 325 465 285 465
1 240 507 242 556
1 226 284 224 338
1 226 248 167 277
1 226 242 165 255
1 226 236 167 233
1 226 230 168 212
1 330 241 271 242
1 226 266 166 307
1 226 272 171 332
1 240 489 161 525
1 240 495 162 551
1 612 242 541 206
1 612 248 514 242
1 612 254 512 265
1 612 260 513 288
1 612 278 511 315
1 612 284 512 341
1 612 296 605 346
1 584 514 574 568
1 686 254 657 254
1 663 472 629 472
1 584 460 553 418
1 584 466 510 445
1 584 472 504 472
1 584 478 506 492
1 584 496 505 515
1 584 502 521 541
38 9
20 645 243 704 224 0
in2_3
20 622 461 681 442 0
in2_2
20 289 230 348 211 0
in2_1
20 284 454 343 435 0
in2_0
22 229 46 338 26 0 \NUL
Read Register 2
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
19 410 481 469 462 0
reg0_2
19 417 277 476 258 0
reg0_3
19 68 491 127 472 0
reg0_0
19 71 266 130 247 0
reg0_1
19 408 461 467 442 0
reg1_2
19 416 254 475 235 0
reg1_3
19 68 471 127 452 0
reg1_0
19 69 244 128 225 0
reg1_1
19 414 434 473 415 0
reg2_2
19 457 407 516 388 0
reg2_3
19 68 451 127 432 0
reg2_0
19 71 222 130 203 0
reg2_1
19 418 231 477 212 0
reg3_2
19 445 195 504 176 0
reg3_3
19 67 431 126 412 0
reg3_0
19 72 201 131 182 0
reg3_1
31 199 490 248 405 0 1
14 156 560 205 511
19 65 514 124 495 0
adr2_1
19 66 540 125 521 0
adr2_0
31 185 267 234 182 0 1
14 138 342 187 293
19 70 296 129 277 0
adr2_1
19 75 321 134 302 0
adr2_0
31 571 279 620 194 0 1
31 543 497 592 412 0 1
14 519 350 568 301
19 415 304 474 285 0
adr2_1
19 416 330 475 311 0
adr2_0
14 488 572 537 523
19 409 504 468 485 0
adr2_1
19 425 530 484 511 0
adr2_0
22 17 132 762 112 0 \NUL
Used a 4:1 mux to read the bits from each individual register and use the adress bits to select which one was read
22 17 156 623 136 0 \NUL
since 0 0 signified register 0 the mux would send the the bit from reg0, 01 then from reg1 etc.
1 200 432 123 421
1 200 438 124 441
1 200 444 124 461
1 200 450 124 481
1 285 444 245 444
1 200 486 202 535
1 186 263 184 317
1 186 227 127 256
1 186 221 125 234
1 186 215 127 212
1 186 209 128 191
1 290 220 231 221
1 186 245 126 286
1 186 251 131 311
1 200 468 121 504
1 200 474 122 530
1 572 221 501 185
1 572 227 474 221
1 572 233 472 244
1 572 239 473 267
1 572 257 471 294
1 572 263 472 320
1 572 275 565 325
1 544 493 534 547
1 646 233 617 233
1 623 451 589 451
1 544 439 513 397
1 544 445 470 424
1 544 451 464 451
1 544 457 466 471
1 544 475 465 494
1 544 481 481 520
38 10
22 12 78 52 58 0 \NUL
Lab 2
22 12 30 112 10 0 \NUL
Nikitin, Dmitriy
22 12 54 63 34 0 \NUL
dnikitin
22 12 102 149 82 0 \NUL
CSE 12, Spring 2020
22 14 127 151 107 0 \NUL
ALU for right rotation
20 239 287 298 268 0
alu_0
19 27 327 86 308 0
in2_0
20 269 473 328 454 0
alu_1
20 701 291 760 272 0
alu_2
19 29 259 88 240 0
in2_3
20 699 467 758 448 0
alu_3
19 29 305 88 286 0
in2_1
19 29 283 88 264 0
in2_2
31 169 323 218 238 0 1
14 69 408 118 359
19 26 379 85 360 0
in1_0
19 26 351 85 332 0
in1_1
19 47 450 106 431 0
in2_0
19 48 471 107 452 0
in2_3
19 49 515 108 496 0
in2_1
19 48 493 107 474 0
in2_2
31 200 509 249 424 0 1
14 103 592 152 543
19 46 562 105 543 0
in1_0
19 49 539 108 520 0
in1_1
19 465 291 524 272 0
in2_0
19 466 312 525 293 0
in2_3
19 463 269 522 250 0
in2_1
19 466 334 525 315 0
in2_2
31 622 327 671 242 0 1
14 525 410 574 361
19 468 380 527 361 0
in1_0
19 471 357 530 338 0
in1_1
19 456 490 515 471 0
in2_0
19 455 511 514 492 0
in2_3
19 456 467 515 448 0
in2_1
19 455 445 514 426 0
in2_2
31 610 503 659 418 0 1
14 513 586 562 537
19 456 556 515 537 0
in1_0
19 459 533 518 514 0
in1_1
22 162 80 679 60 0 \NUL
Here I used a 4:1 mux to select which bit will be in what spot after the rotations 
22 160 107 778 87 0 \NUL
The way I figured out how many roations will take place are by the 2 least significant bits of in1
22 159 130 762 110 0 \NUL
If  in1_0 and in1_1 were 0 0 then no shifts would take place, 0 1 then 1 shift, 1 0 then 2 shifts
22 15 158 770 138 0 \NUL
1 1 then 3 shifts, then I looked at where each individual bit be on those shifts and wired them accordingly to the mux
22 14 185 788 165 0 \NUL
for mux 1, if the input was 00 then the 0th bit would be in the 0th spot, if  01 then the 1st bit would be in the 0th spot etc.
22 8 212 776 192 0 \NUL
i figured this out by writing all the possible bits from 0 -15 and looked at what bits signified the # of shifts, as for every
22 4 236 728 216 0 \NUL
 4th shift the bit would be resest back to its original state so in turn only the 2 lest signifact bits mattered for in1
1 85 249 170 265
1 85 273 170 271
1 85 295 170 277
1 83 317 170 283
1 115 383 170 319
1 215 277 240 277
1 82 341 170 301
1 82 369 170 307
1 149 567 201 505
1 105 529 201 487
1 102 552 201 493
1 105 505 201 469
1 104 483 201 463
1 104 461 201 457
1 103 440 201 451
1 246 463 270 463
1 571 385 623 323
1 527 347 623 305
1 524 370 623 311
1 522 324 623 287
1 522 302 623 281
1 521 281 623 275
1 519 259 623 269
1 668 281 702 281
1 559 561 611 499
1 515 523 611 481
1 512 546 611 487
1 511 501 611 463
1 512 480 611 457
1 512 457 611 451
1 511 435 611 445
1 656 457 700 457
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
0
0
0
34
